ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_line()+
geom_hline(data = tibbleReturn %>%
distinct(normal_min, normal_max) %>%
gather(key, value, starts_with("normal_")),
aes(yintercept = value, fill = key, y = value))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_min), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L),
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max)
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_line()+
geom_hline(data = tibbleReturn %>%
distinct(normal_min, normal_max) %>%
gather(key, value, starts_with("normal_")),
aes(yintercept = value, fill = key, y = value))
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_line()+
geom_hline(data = tibbleReturn %>%
distinct(normal_min, normal_max) %>%
gather(key, value, starts_with("normal_")),
aes(yintercept = value, y = value), color = "red")
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_line()+
geom_ribbon(aes(ymin = normal_min, ymax = normal_max))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_min), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min))+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max))+
geom_line(alpha = 0.5, fill = "")
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), color = "salmon")+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), color= "salmon")+
geom_line(alpha = 0.5, fill = "")
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon")+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon")+
geom_line(alpha = 0.5, fill = "")
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.3)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.3)+
geom_line(alpha = 0.5, fill = "")
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.3)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.3)+
geom_line(alpha = 0.5, fill = "")+
theme_bw()
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5, fill = "")+
theme_bw()
ymax = 1.1 * max(tibbleReturn$normal_max, tibbleReturn$normal_max)
ymax = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5, fill = "")+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[1]))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
rangeY
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_min), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates)
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(.))
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
View(table2)
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_min), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
stopifnot(is_datetime dates)
numberOfDates = length(dates)
numberOfDates = length(dates)
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
View(table2)
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
numberOfDates = length(dates)
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
library(openxlsx)
library(tidyverse)
library(lubridate)
library(digest)
library(forecast)
source("Rfunctions.R")
# PARAMS
files = list()
files$bloodAnalysis = "data/template - blood analysis.xlsx"
files$treatments = "data/template - treatment.xlsx"
files$clinicalObservations = "data/template - clinical_observartions.xlsx"
listTablesNormalValues = list()
# TABLE BLOOD ANALYSIS
tableTemplateValues = read.xlsx(files$bloodAnalysis, skipEmptyRows = TRUE) %>%
as_tibble() %>%
mutate(value = as.numeric(value)) %>%
mutate(normal_min = str_extract(range_normal, pattern = "(\\([[:digit:]]+(\\.[[:digit:]])*)|(Inf)|(-Inf)") %>% str_remove("(\\()") %>% as.numeric()) %>%
mutate(normal_max = str_extract(range_normal, pattern = "[[:digit:]]+(\\.[[:digit:]])*\\)|(Inf)|(-Inf)") %>% str_remove("(\\))") %>% as.numeric()) %>%
mutate(patientID = NA, datetime = Sys.time(), parameter, value, unit, normal_min, normal_max) %>%
select(patientID, datetime, parameter, value, unit, normal_min, normal_max)
tableNormalValues = table1 %>%
select(parameter, unit, normal_min, normal_max) %>%
distinct(parameter, .keep_all = TRUE)
tableTemplateValues = table1 %>%
mutate(patientID = NA, datetime = Sys.time()) %>%
select(patientID, datetime, parameter, value, unit)
patientID = Sys.time() %>% digest(algo = "xxhash32")
dates = seq(from = Sys.time() - days(15), to = Sys.time(), by = "1 day") %>% with_tz("UTC")
currentRow = tableTemplateValues[1,]
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
numberOfDates = length(dates)
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
currentRow = tableTemplateValues[1,]
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
currentRow$normal_min
tableTemplateValues
View(tableNormalValues)
# TABLE BLOOD ANALYSIS
tableTemplateValues = read.xlsx(files$bloodAnalysis, skipEmptyRows = TRUE) %>%
as_tibble() %>%
mutate(value = as.numeric(value)) %>%
mutate(normal_min = str_extract(range_normal, pattern = "(\\([[:digit:]]+(\\.[[:digit:]])*)|(Inf)|(-Inf)") %>% str_remove("(\\()") %>% as.numeric()) %>%
mutate(normal_max = str_extract(range_normal, pattern = "[[:digit:]]+(\\.[[:digit:]])*\\)|(Inf)|(-Inf)") %>% str_remove("(\\))") %>% as.numeric()) %>%
mutate(patientID = NA, datetime = Sys.time(), parameter, value, unit, normal_min, normal_max) %>%
select(patientID, datetime, parameter, value, unit, normal_min, normal_max)
patientID = Sys.time() %>% digest(algo = "xxhash32")
dates = seq(from = Sys.time() - days(15), to = Sys.time(), by = "1 day") %>% with_tz("UTC")
currentRow = tableTemplateValues[1,]
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = 14L) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
tibbleReturn
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = sample(10:100, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = sample(10:100, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.1, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
tibbleReturn %>% distinct(normal_min, normal_max) %>% gather(key, value, starts_with("normal_"))
rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
numberOfDates = length(dates)
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
View(table2)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
ggplot(tibbleReturn, aes(x = datetime, y = value))+
geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
geom_point()+
geom_line(alpha = 0.5)+
theme_bw()+
coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
#currentRow = tableTemplateValues[1,]
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
createDummyDataBloodAnalysis = function(patientID, dates, tableTemplateValues){
#currentRow = tableTemplateValues[1,]
extendToManyDates = function(currentRow, dates, patientID){
stopifnot(nrow(currentRow) == 1)
tibbleReturn = tibble(patientID = patientID,
datetime = dates,
parameter = currentRow$parameter,
value = rep(runif(n = 1, min = currentRow$normal_min, max = currentRow$normal_max), length.out = length(dates)) %>%
distortWithColoredNoise(sd = 0.05, movingAverageOrder = sample(30:1000, size = 1)) %>% abs(),
absolute_min = 0,
normal_min = currentRow$normal_min,
normal_max = currentRow$normal_max,
absolute_max = Inf)
}
# rangeY = range(tibbleReturn$normal_min, tibbleReturn$value, tibbleReturn$normal_max)
# ggplot(tibbleReturn, aes(x = datetime, y = value))+
#   geom_ribbon(aes(ymin = absolute_min, ymax = normal_min), fill = "salmon", alpha = 0.4)+
#   geom_ribbon(aes(ymin = normal_max, ymax = absolute_max), fill= "salmon", alpha = 0.5)+
#   geom_point()+
#   geom_line(alpha = 0.5)+
#   theme_bw()+
#   coord_cartesian(ylim = c(0.9 * rangeY[1], 1.1 * rangeY[2]))
table2 = tableTemplateValues %>%
distinct(parameter, .keep_all = TRUE) %>%
group_by(parameter) %>%
do(extendToManyDates(., patientID = patientID, dates = dates))
return(table2)
}
numberOfPatients = 50
numberOfPatients = 50
maxNumberOfdays = 30
sample(4:numberOfPatients, 1)
maxNumberOfDays = 30
numberOfPatients = 50
maxNumberOfDays = 30
dates = seq(from = Sys.Date() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.Date(),
by = "1 day") %>% with_tz("UTC")
dates
class(dates)
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
dates
patientID =
Sys.time() %>% digest(algo = "xxhash32")
patientID = ii %>% digest(algo = "xxhash32")
ii = 1
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
patientID = ii %>% digest(algo = "xxhash32")
createTablePatientsAndDates = function(patientID, maxNumberOfDays, tableTemplateValues){
tablePatientsAndDates = lappy(seq(numberOfPatients), function(ii){
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
patientID = ii %>% digest(algo = "xxhash32")
tableReturn = createDummyDataBloodAnalysis(patientID = patientID,
dates = dates,
tableTemplateValues = tableTemplateValues)
})
}
createTablePatientsAndDates = function(numberOfPatients, maxNumberOfDays, tableTemplateValues){
tablePatientsAndDates = lappy(seq(numberOfPatients), function(ii){
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
patientID = ii %>% digest(algo = "xxhash32")
tableReturn = createDummyDataBloodAnalysis(patientID = patientID,
dates = dates,
tableTemplateValues = tableTemplateValues)
})
}
tablePatientsAndDates = createTablePatientsAndDates(numberOfPatients = numberOfPatients,
maxNumberOfDays = maxNumberOfDays,
tableTemplateValues = tableTemplateValues)
createTablePatientsAndDates = function(numberOfPatients, maxNumberOfDays, tableTemplateValues){
tablePatientsAndDates = lapply(seq(numberOfPatients), function(ii){
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
patientID = ii %>% digest(algo = "xxhash32")
tableReturn = createDummyDataBloodAnalysis(patientID = patientID,
dates = dates,
tableTemplateValues = tableTemplateValues)
})
}
tablePatientsAndDates = createTablePatientsAndDates(numberOfPatients = numberOfPatients,
maxNumberOfDays = maxNumberOfDays,
tableTemplateValues = tableTemplateValues)
library(data.table)
createTablePatientsAndDates = function(numberOfPatients, maxNumberOfDays, tableTemplateValues){
tablePatientsAndDates = lapply(seq(numberOfPatients), function(ii){
message(ii)
dates = seq(from = Sys.time() - days(sample(4:maxNumberOfDays, 1)),
to = Sys.time(),
by = "1 day") %>% with_tz("UTC")
patientID = ii %>% digest(algo = "xxhash32")
tableReturn = createDummyDataBloodAnalysis(patientID = patientID,
dates = dates,
tableTemplateValues = tableTemplateValues)
}) %>%
data.table::rbindlist()
}
tablePatientsAndDates = createTablePatientsAndDates(numberOfPatients = numberOfPatients,
maxNumberOfDays = maxNumberOfDays,
tableTemplateValues = tableTemplateValues)
View(tablePatientsAndDates)
source('D:/Git_damiano/2020-04_vsvirus_prototype/Rfunctions.R')
rm(list = ls())
source("Rfunctions.R")
# PARAMS
files = list()
files$bloodAnalysis = "data/template - blood analysis.xlsx"
files$treatments = "data/template - treatment.xlsx"
files$clinicalObservations = "data/template - clinical_observartions.xlsx"
numberOfPatients = 50
maxNumberOfDays = 30
# TABLE BLOOD ANALYSIS
tableTemplateValues = read.xlsx(files$bloodAnalysis, skipEmptyRows = TRUE) %>%
as_tibble() %>%
mutate(value = as.numeric(value)) %>%
mutate(normal_min = str_extract(range_normal, pattern = "(\\([[:digit:]]+(\\.[[:digit:]])*)|(Inf)|(-Inf)") %>% str_remove("(\\()") %>% as.numeric()) %>%
mutate(normal_max = str_extract(range_normal, pattern = "[[:digit:]]+(\\.[[:digit:]])*\\)|(Inf)|(-Inf)") %>% str_remove("(\\))") %>% as.numeric()) %>%
mutate(patientID = NA, datetime = Sys.time(), parameter, value, unit, normal_min, normal_max) %>%
select(patientID, datetime, parameter, value, unit, normal_min, normal_max)
# Create dummy data blood analysis
tablePatientsAndDates = createTablePatientsAndDates(numberOfPatients = numberOfPatients,
maxNumberOfDays = maxNumberOfDays,
tableTemplateValues = tableTemplateValues)
